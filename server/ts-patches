--- services/completions.ts
+++ services/completions.ts
@@ -131,6 +131,7 @@
             kind: SymbolDisplay.getSymbolKind(typeChecker, symbol, location),
             kindModifiers: SymbolDisplay.getSymbolModifiers(symbol),
             sortText: "0",
+            type: typeChecker.typeToString(typeChecker.getTypeOfSymbolAtLocation(symbol, location))
         };
     }
 
--- services/goToDefinition.ts
+++ services/goToDefinition.ts
@@ -73,7 +73,9 @@
             const shorthandSymbolName = typeChecker.symbolToString(shorthandSymbol);
             const shorthandContainerName = typeChecker.symbolToString(symbol.parent, node);
             return map(shorthandDeclarations,
-                declaration => createDefinitionInfo(declaration, shorthandSymbolKind, shorthandSymbolName, shorthandContainerName));
+                // netbeanstypescript edit - node kind is more useful to distinguish the decls
+                //declaration => createDefinitionInfo(declaration, shorthandSymbolKind, shorthandSymbolName, shorthandContainerName));
+                declaration => createDefinitionInfo(declaration, getNodeKind(declaration), shorthandSymbolName, shorthandContainerName));
         }
 
         // If the node is the name of a BindingElement within an ObjectBindingPattern instead of just returning the
@@ -181,7 +183,9 @@
             !tryAddCallSignature(symbol, node, symbolKind, symbolName, containerName, result)) {
             // Just add all the declarations.
             forEach(declarations, declaration => {
-                result.push(createDefinitionInfo(declaration, symbolKind, symbolName, containerName));
+                // netbeanstypescript edit - node kind is more useful to distinguish the decls
+                //result.push(createDefinitionInfo(declaration, symbolKind, symbolName, containerName));
+                result.push(createDefinitionInfo(declaration, getNodeKind(declaration), symbolName, containerName));
             });
         }
 
--- services/types.ts
+++ services/types.ts
@@ -657,6 +657,7 @@
         kind: ScriptElementKind;
         kindModifiers: string;   // see ScriptElementKindModifier, comma separated
         sortText: string;
+        type?: string;
         /**
          * An optional span that indicates the text to be replaced by this completion item. It will be
          * set if the required span differs from the one generated by the default replacement behavior and should
